# -*- coding: utf-8 -*-
"""FASESCAN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qPnd1qtstxW1pb7r9mJN-ERhjO7ZrgLG
"""

pip install keras pillow numpy

!pip -q install streamlit
!pip -q install pyngrok

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# import streamlit as st
# from img_classification import teachable_machine_classification
# import keras
# from PIL import Image, ImageOps
# import numpy as np
# st.title("Acceso a las instalaciones de la UACH")
# st.header("Accesos mediante reconocimiento facial")
# 
# st.image("https://i.ibb.co/88Q9kSy/Imagen1.png")
# st.audio("https://s19.aconvert.com/convert/p3r68-cdx67/8a66g-3a7ec.mp3")
# st.write("Inserte fotografia aqui â¬‡")
# uploaded_file = st.file_uploader("Choose a Alumno/No alumno jpg pic ...", type="jpg")
# if uploaded_file is not None:
#   image = Image.open(uploaded_file)
#   st.image(image, caption='Uploaded pic.', use_column_width=True)
#   st.write("")
#   st.write("Classifying...")
#   label = teachable_machine_classification(image, 'keras_model.h5') # Name of the model from Teachablemachine
#   if label == 0:
#     st.write("Is a :Alumno:")
#   else:
#     st.write("Is a :No alumno:")

# Commented out IPython magic to ensure Python compatibility.
# %%writefile img_classification.py
# import tensorflow.keras
# from PIL import Image, ImageOps
# import numpy as np
# 
# 
# def teachable_machine_classification(img, weights_file):
#     # Load the model
#     model = tensorflow.keras.models.load_model(weights_file)
# 
#     # Create the array of the right shape to feed into the keras model
#     data = np.ndarray(shape=(1, 224, 224, 3), dtype=np.float32)
#     image = img
#     #image sizing
#     size = (224, 224)
#     image = ImageOps.fit(image, size, Image.ANTIALIAS)
# 
#     #turn the image into a numpy array
#     image_array = np.asarray(image)
#     # Normalize the image
#     normalized_image_array = (image_array.astype(np.float32) / 127.0) - 1
# 
#     # Load the image into the array
#     data[0] = normalized_image_array  # (Not sure if this is needed, but gives an error!!!)
# 
#     # run the inference
#     prediction = model.predict(data)
#     return np.argmax(prediction) # return position of the highest probability